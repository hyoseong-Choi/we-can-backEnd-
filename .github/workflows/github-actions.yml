# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Set up jdk'
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # https://github.com/actions/setup-java

      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: touch ./src/main/resources/application-jwt.yml
      - run: echo "${{ secrets.APPLICATION_JWT }}" > ./src/main/resources/application-jwt.yml
      - run: touch ./src/main/resources/application-toss.yml
      - run: echo "${{ secrets.APPLICATION_TOSS }}" > ./src/main/resources/application-toss.yml

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## gradle build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_EC2 }}
          username: ubuntu
          key: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            sudo docker rm -f wecan
            sudo docker image rm ${{ secrets.DOCKER_REPO }} -f
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            sudo docker run --name wecan --network host -d -v ~/image/:/image/ -p 8080:8080 ${{ secrets.DOCKER_REPO }}
